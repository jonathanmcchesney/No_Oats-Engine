#version 330 core
// Created By Jonathan McChesney
 
// Layout Qualifiers - Inputs
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 textureCoords;

// Outputs
out vec3 Normal, FragmentPosition;
out vec2 TextureCoords;

// Uniforms
uniform mat4 model,view,projection;

// We calculate our Position vector and multiply it with the MVP matrix to find our gl_position.
// The normal vector is found by transposing the inverse of the the model matrix and multiplying it with the normal input vector.
// The inputs texture coordinates are then used to calculate the texture coordinate output.
// The fragment position is finally calculated by multiplying the model matrix with the Position vector with the w component initialised to 1.0f.
void main()
{
	vec4 Position = vec4(position, 1.0f);
    gl_Position = (projection * view *  model) * Position;

    Normal = mat3(transpose(inverse(model))) * normal; // DO NOT DO THIS IN FRAG SHADER - inverse = expensive && can only transpose othogonol matricies
    TextureCoords = textureCoords;
    FragmentPosition = vec3(model * Position);

}