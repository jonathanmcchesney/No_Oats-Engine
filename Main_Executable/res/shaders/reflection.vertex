#version 330 core
// Created By Jonathan McChesney
 
// Layout Qualifiers
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;

// Outputs
out vec3 Normal, Position;
out vec2 TextureCoords;

// Uniforms - MVP matrix
uniform mat4 model, view, projection;

// Calculate the position vector to multiply with the MVP matrix to calculate the gl_position. Next Find the normal vector
// by taking the transpose of the inverse of the model matrix * normal input vector (can only transpose orthogonal matricies).
// Calculate output Position and texture coordinates as appopriate.
void main()
{
	vec4 positionVector = vec4(position, 1.0f);
    gl_Position = (projection * view * model) * positionVector;

    Normal = mat3(transpose(inverse(model))) * normal;
    Position = vec3(model * positionVector);
    TextureCoords = texCoords;
}