#version 330 core
// Created By Jonathan McChesney
 
// Interface Block
in VS_OUT {
    vec3 FragmentPosition, Normal;
    vec2 TextureCoords;
} fs_in;

// Outputs
out vec4 FragmentColour;

// Uniforms
uniform sampler2D tex;
uniform vec3 lightPos, viewPos;
uniform bool blinn;

void main()
{           
    vec3 colour = texture(tex, fs_in.TextureCoords).rgb; // set the colour vector to the texture converted from the coordinates to rgb values

    vec3 ambient = 0.06 * colour; // set the ambient colour to the colour value times a constant of 0.06

	// Set the light direction by normalizing the uniform light position minus the fragment postion
	// passed from the interfaceblock VS_OUT. We then set our normal similarly - making sure to normalize
	// to (Unit vector). The diffuse component is set by taking the dot product of the light direction
	// and the surface normal, finally combining the diffuse component and the ambient colour component.
	// Note: normalize returns a vector with the same direction as its parameter, v, but with length 1.
    vec3 lightDirection = normalize(lightPos - fs_in.FragmentPosition);
    vec3 normal = normalize(fs_in.Normal);
    float diffuse = max(dot(lightDirection, normal), 0.0);
    vec3 newDiffuse = diffuse * colour;

	// Setting up the view direction in a similar fashion to the light direction except we take the view-pos
	// From here we can now calculate the reflection direction using the reflect function of the inverse of 
	// the light direction - this is because we do not want the incident direction but rather the reflection
	// direction i.e. the inverse of the incident ray to the normal = reflection direction. 

	//For a given incident vector I and surface normal N reflect returns the reflection direction calculated as I - 2.0 * dot(N, I) * N.
	//N should be normalized in order to achieve the desired result.
    vec3 viewDirection = normalize(viewPos - fs_in.FragmentPosition);
    vec3 reflectionDirection = reflect(-lightDirection, normal);

	// The specular component is set to equal a small value initially - just to insure its never 0.0f.
    float specular = 0.001;
	// This toggle allows the specular component to be set for when a blinn lighting model is set or not
    if(blinn) // active
    {
		// the halfway vector is normalized to the combined light and view direction, and is ued in calculating
		// the specular component/ By taking the dot product of the normal and halfway direction - strongest
		// when perpendicular.
        vec3 halfwayDirection = normalize(lightDirection + viewDirection);  
        specular = pow(max(dot(normal, halfwayDirection), 0.0), 32.0); // pow = raise to the power of
	}
    else { 
	// similar for when inactive, except we use the reflection direction instead of the halfway vector - i.e.
	// a vector beteween the viewer and light direction
	specular = pow(max(dot(viewDirection, reflectionDirection), 0.0), 32.0); 
		}

	// The new specular component is calculated as follows, the fragment colour is then outputted.
    vec3 newSpecular = vec3(0.3) * specular; 
    FragmentColour = vec4(ambient + newDiffuse + newSpecular, 1.0f);
}