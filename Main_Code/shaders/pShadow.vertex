#version 330 core
// Layout Qualifiers - Inputs
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 textureCoords;

// Interface Block - Outputs
// Created By Jonathan McChesney
 
out VS_OUT 
{
    vec3 FragmentPosition, Normal;
    vec2 TextureCoords;
} vs_out;

// Uniforms
uniform mat4 projection, view, model;
uniform bool reverse_normals; // important step

// We calculate the gl_position as normal i.e. MVP * position input (with w component instantied to 1.0f).
// Next we use our input reverse_normals, if true then we invert the normal value in the equation i.e. multiply by -1. This is used to find the output normal.
// The texture coordinates and fragment position outputs are set as normal also.
void main()
{
	vec4 Position =  vec4(position, 1.0f);
    gl_Position = (projection * view * model) * Position;

    if(reverse_normals)
        vs_out.Normal = transpose(inverse(mat3(model))) * (-1.0 * normal);
    else
        vs_out.Normal = transpose(inverse(mat3(model))) * normal;

    vs_out.TextureCoords = textureCoords;
	    vs_out.FragmentPosition = vec3(model * Position);

}