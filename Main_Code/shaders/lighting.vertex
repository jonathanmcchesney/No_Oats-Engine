#version 330 core
// Layout Qualifiers
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;

// Outputs
out vec3 Normal, FragPos;
out vec2 TexCoords;

// Uniforms
uniform mat4 model, view, projection;

// Calculate the gl_position my multiplying the MVP matrix by the vec4 of the position input vector with the w component initialised to 1.0f.
// Calculate the Normal by transposing the inverse of the model matix (can only transpose a othogonal matrix) and multipling this with input normal vector.
// Set the texture coordinates to the relevant input coordinate. Finally set the output fragment colour to the model matrix * the Position Vector.
void main()
{
	vec4 Position = vec4(posisiton, 1.0f);
    gl_Position = (projection * view *  model) * Position;

    Normal = mat3(transpose(inverse(model))) * normal;
	TexCoords = texCoords;
	FragPos = vec3(model * Position);
}