#version 330 core
// Created By Jonathan McChesney
 
// Layout Qualifiers
layout (location = 0) in vec3 position;
layout (location = 2) in vec2 textureCoords;
layout (location = 3) in vec3 tangent;
layout (location = 4) in vec3 bitangent;
layout (location = 1) in vec3 normal;

// Interface Block:- Outputs: containing the fragment position, light/view/frag position in tangent space as well as the texture coordinates.
out VS_OUT 
{
    vec3 FragmentPosition,TangentSpaceLightPosition, TangentSpaceViewPosition, TangentSpaceFragmentPosition;
    vec2 TextureCoords;
} vs_out;

// Uniforms
uniform mat4 projection,view,model; // MVP matrix
uniform vec3 lightPos, viewPos; // Important vec3's

// Set the gl_position by multiplying the MVP matrix by the position input vector (with the w component set to 1.0f).
// The fragment position and texture components of the interface block are now set appropriately (multiplying by the model matrix by the Position vector & the tex coordiantes as appropriate).
// The normal matrix is created (the transpose of the inverse of the model matrix (converted to a mat3 as we dont need the w component) - can only transpose orthagonal matricies).
// Note: The transpose of a matrix is an operator which flips a matrix over its diagonal component.
// The TBN (tangent, bitangent, Normal) matrix is set up by normalising the tangent, bitangent and normal components (multiplied with the normal matrix) - normalising converts into a unit vector.
// Finally we calculate our tangent space frag/view/light positions by multipling the relevant vectors by the TBN matrix to convert them to tangent space and send them off to the interface block - frag shader.
void main()
{
	vec4 Position = vec4(position, 1.0f);
    gl_Position = (projection * view * model) * Position;
    vs_out.FragmentPosition = vec3(model * Position);   
    vs_out.TextureCoords = textureCoords;
    
    mat3 normalMatrix = transpose(inverse(mat3(model))); // transpose outside vertex shader - expensive - can only tanspose othogonol matricies    
    
    mat3 TBN = transpose(mat3(normalize(normalMatrix * tangent), normalize(normalMatrix * bitangent), normalize(normalMatrix * normal)));  
    vs_out.TangentSpaceFragmentPosition  = TBN * vs_out.FragmentPosition;
    vs_out.TangentSpaceViewPosition  = TBN * viewPos;
    vs_out.TangentSpaceLightPosition = TBN * lightPos;
}

// Note: on transposing the inverse of a matrix
// transpose(A)*B = identity
// ~ transpose(A) = identity*inverse(B)
// ~ transpose(A) = inverse(B)
// ~ A = transpose(inverse(B))